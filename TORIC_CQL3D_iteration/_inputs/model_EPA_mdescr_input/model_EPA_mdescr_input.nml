! Matching previous run by Jungpyo Lee for ITER 48 Mhz, 3He minority case.
! Nota Bene: The exponents of the power parabolic profiles need discussion. JPL uses a
! grid uniformly spaced between (0,1) which he calls psi.  I assume psi is poloidal flux.
! Now the TORIC and CQL3D IPS components work with IPS radial coordinate, "rho", which is
! sqrt(toroidal flux) ranging between (0,1).  In my "Power_Parabolic" model the radial
! coordinate is raised to the alpha_xxx_1 power.  In Jungpyo's model psi is raised to the
! ppxxxie power.  So to approximately match his profiles I am taking my alpha_xxx_1 power
! to be 1/2 his ppxxxie.  We'll probably want to do better later.


&state_data

! rho grid length for thermal plasma species
 nrho = 51

! kdens_rfmin:
!	= "fraction" => nmini(i) = fracmin(i)*ne!
!	= any other value (e.g. "data" or "model") then
!	the minority density is set by some other
!	means (e.g. read in from another data source).
  kdens_rfmin = 'fraction'

!fracmin(nspec_rfmin)
!     minority density fraction if kdens_rfmin="fraction"
!     if so, it must have non-zero positive value for each minority ion specie.
!     sum(fracmin) << 1 is expected.
  fracmin = 0.02

! isThermal(nspec_rfmin)
!     =1 if minority specie is thermalized
!     =0: never set; =2: non-thermal.
  isThermal = 1

! power on each ICRF source, Units: W
  power_ic = 0.01
 /

&evolving_model_data

  Te_profile_model_name = 'Power_Parabolic',
  Te_0 = 25.0,
  Te_edge = 5.3,
  alpha_Te_1 = 1.0,
  alpha_Te_2 = 1.5,

  ne_profile_model_name = 'Power_Parabolic',
  ne_0 = 10.5e19,
  ne_edge = 4.9e19,
  alpha_ne_1 = 16.0,
  alpha_ne_2 = 0.5,

 Ti_profile_model_name = 'Power_Parabolic',
  Ti_0 = 27.5,
  Ti_edge =5.3,
  alpha_Ti_1 = 1.0,
  alpha_Ti_2 = 1.5,

 ni_profile_model_name = 'fraction_of_electron'
 frac_ni(1) =0.48
 frac_ni(2) =0.48

 Zeff_profile_model_name = 'Power_Parabolic', 
 Zeff_0 = 2.0,
 Zeff_edge = 2.0,
 alpha_Zeff_1 = 1.0,
 alpha_Zeff_2 = 1.0,

 V_loop_profile_model_name = 'Power_Parabolic',
 V_loop_0 = 0.,
 V_loop_edge = 0.,
 alpha_V_loop_1 = 0.,
 alpha_V_loop_2 = 0.

 /
