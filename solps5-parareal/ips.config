
USER_W3_DIR = $ATOM/www/$USER
USER_W3_BASEURL = http://portal.nersc.gov/project/atom/$USER

# ======================================================================
# ROOT LOCATION
# ======================================================================

IPS_ROOT = $IPS_PATH

IPS_WRAPPER_PATH = /project/projectdirs/atom/users/elwasif/runs/ips-atom/
OUTPUT_PREFIX = 

RUN_ID = SOLPS_PR
TOKAMAK_ID = ITER
SHOT_NUMBER = 20_20
# Numerical identifier for specific case

SIM_NAME = ${RUN_ID}_${TOKAMAK_ID}_${SHOT_NUMBER}  # Name of current simulation
SIM_ROOT = $PWD
SIM_INPUT_DIR= $PWD/_inputs 

LOG_FILE = $SIM_ROOT/${RUN_ID}.log
LOG_LEVEL = DEBUG

SIMULATION_MODE = NORMAL

# A run comment picked up by the portal
RUN_COMMENT = SOLPS_pr - Testing the parareal implementation

# Specification of plasma state files

# Where to put plasma state files as the simulation evolves 
PLASMA_STATE_WORK_DIR = $SIM_ROOT/work/plasma_state

# Construct names for plasma state files below is the list of all the plasma state
# files that have been used so far.  Most components only use one or two


# Specify what files constitute the plasma state - N.B. not all components need all files
#PLASMA_STATE_FILES = $CURRENT_STATE_COARSE $CURRENT_STATE_FINE 


MAX_ITERATION = 6000
MAX_SLICE =  16         # global config parameter for the number of time slices (+1 for time grid)
NT_SLICE = 16
T_TOTAL = $NT_SLICE
# Names of ports to be used.  An implementation and configuration must be specified for
# each port
SIM_TYPE = BETA
[PORTS]
   NAMES = DRIVER FINE COARSE CONVERGE
   
# DRIVER port is called by the framework.  It is required, causes exception.

   [[DRIVER]]                                       # REQUIRED Port section 
      IMPLEMENTATION = PARAREAL
                                                    
# INIT port is called by the framework.  It typically produces the very first set of
# plasma state files for SIMULATION_MODE = NORMAL.  It does not raise and exception
# if missing.
                                                    
   [[INIT]]   
      IMPLEMENTATION =  

# Specification of IMPLEMENTATION for each physics port called out in PORTS list.
# Additional specifications may be present that are not in the PORTS list

  [[FINE]]
      IMPLEMENTATION = FINE_SOLPS

  [[COARSE]]
      IMPLEMENTATION = COARSE_SOLPS

  [[CONVERGE]]
      IMPLEMENTATION = CONVERGE_SOLPS
      
      
# Specification of configuration for each port called out in PORTS list.
# Additional specifications may be present that are not in the PORTS list
# NAME variable MUST match the name of the python class that implements the component

[PARAREAL]
    CLASS = DRIVERS
    SUB_CLASS =
    NAME = Driver
    NPROC = 1
    BIN_PATH = $IPS_WRAPPER_PATH
    INPUT_DIR = $IPS_WRAPPER_PATH/ips-solps5-parareal
    INPUT_FILES = 
    OUTPUT_FILES =  
    SCRIPT = $IPS_WRAPPER_PATH/ips-solps5-parareal/parareal_driver_events.py

[FINE_SOLPS]
    CLASS = SOLPS_PR
    SUB_CLASS = PARAREAL
    NAME = Fine
    NPROC = 1
    BIN_PATH = $IPS_WRAPPER_PATH/ips-solps5-parareal
    INPUT_DIR = $SIM_INPUT_DIR/F_Run
    INPUT_DELTAS = b2.sputter_save.parameters_150_36
    INPUT_WALL = b2.wall_save.parameters_150_36
    INPUT_VALUES = b2fstatiD1
    INPUT_VALUES2 = SOLPS2_V2.sh
    INPUT_FILES = $INPUT_VALUES $INPUT_VALUES2 $INPUT_DELTAS $INPUT_WALL
    OUTPUT_FILES =  
    SCRIPT = $IPS_WRAPPER_PATH/ips-solps5-parareal/SOLPS_fine_events.py

    C2F_BIN = echo
    F2C_BIN = echo
    CORRECTION_BIN = $IPS_WRAPPER_PATH/ips-solps5-parareal/PR_Corr/SOLPS_Pr_Corr_V2.sh
    EXECUTABLE = $SIM_INPUT_DIR/F_Run/SOLPS_start_DIIID.sh
    TOTAL_STEPS = 6
    STEP_WIDTH = 0.1
    N_PLOT = 120
    TIME_INIT = 0.2
    TIME_FINAL = 2.2
    STEP_NUM = 20     


[COARSE_SOLPS]
    CLASS = SOLPS_PR
    SUB_CLASS = PARAREAL
    NAME = Coarse
    NPROC = 1
    BIN_PATH = $IPS_WRAPPER_PATH/ips-solps5-parareal
    INPUT_DIR = $SIM_INPUT_DIR/G_Run
    INPUT_DELTAS = b2.sputter_save.parameters_150_36
    INPUT_WALL = b2.wall_save.parameters_150_36
    INPUT_VALUES = b2fstatiD1
    INPUT_VALUES2 = SOLPS2_RedGrid_V2.sh
    INPUT_FILES = $INPUT_VALUES $INPUT_VALUES2 $INPUT_DELTAS $INPUT_WALL
    OUTPUT_FILES =
    SCRIPT = $IPS_WRAPPER_PATH/ips-solps5-parareal/SOLPS_coarse_events.py

    C2F_BIN = echo
    F2C_BIN = echo
    CORRECTION_BIN = $IPS_WRAPPER_PATH/ips-solps5-parareal/PR_Corr/SOLPS_Pr_Corr_V2.sh
    EXECUTABLE = $SIM_INPUT_DIR/G_Run/SOLPS_start_RedGrid_DIIID.sh
    TOTAL_STEPS = 6
    STEP_WIDTH = 2.0
    N_PLOT = 6
    TIME_INIT = 0.2
    TIME_FINAL = 2.2
    STEP_NUM = 2


[CONVERGE_SOLPS]
    CLASS = SOLPS_PR
    SUB_CLASS = PARAREAL
    NAME = Converge
    NPROC = 1
    BIN_PATH = $IPS_WRAPPER_PATH
    INPUT_DIR = $IPS_WRAPPER_PATH/ips-solps5-parareal
    INPUT_FILES = 
    OUTPUT_FILES =  
    SCRIPT = $IPS_WRAPPER_PATH/ips-solps5-parareal/SOLPS_converge_events.py

    CONV_BIN = $IPS_WRAPPER_PATH/ips-solps5-parareal/PR_Conv/conv_solps
    TOL = 5.0e-02

# Time loop sepecification (two modes for now) EXPLICIT | REGULAR
# For MODE = REGULAR, the framework uses the variables START, FINISH, and NSTEP
# For MODE = EXPLICIT, the frame work uses the variable VALUES (space separated list of time values)

[TIME_LOOP]
   MODE = REGULAR
   START = 0 
   FINISH = $NT_SLICE 
   NSTEP  = $NT_SLICE
